// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::chassisLeftDriveTalon = NULL;
SpeedController* RobotMap::chassisRightDriveTalon = NULL;
RobotDrive* RobotMap::chassisRobotDrive21 = NULL;
Encoder* RobotMap::shooterTiltSubsystemShooterTiltEncoder = NULL;
SpeedController* RobotMap::shooterTiltSubsystemShooterTiltJaguar = NULL;
DigitalInput* RobotMap::shooterTiltSubsystemShooterTiltTopLimit = NULL;
DigitalInput* RobotMap::shooterTiltSubsystemShooterTiltBottomLimit = NULL;
Encoder* RobotMap::shooterSubsystemShooterEncoder = NULL;
SpeedController* RobotMap::shooterSubsystemShooterWheelJaguar = NULL;
SpeedController* RobotMap::frisbeePanSubsystemPanTiltJaguar = NULL;
Encoder* RobotMap::frisbeePanSubsystemPanTiltEncoder = NULL;
SpeedController* RobotMap::frisbeePanSubsystemPanInjestBeltJaguar = NULL;
SpeedController* RobotMap::frisbeePanSubsystemPanLateralBeltJaguar = NULL;
DigitalInput* RobotMap::frisbeePanSubsystemPanBottomLimit = NULL;
Solenoid* RobotMap::lEDSubsystemBlueLEDStrip = NULL;
Solenoid* RobotMap::lEDSubsystemYellowLEDStrip = NULL;
Solenoid* RobotMap::lEDSubsystemGreenLEDRIng = NULL;
SpeedController* RobotMap::kickerSubsystemKickerJaguar = NULL;
DigitalInput* RobotMap::kickerSubsystemKickerLimit = NULL;
SpeedController* RobotMap::pizzaBoxSubsystemPizzaBoxJaguar = NULL;
DigitalInput* RobotMap::pizzaBoxSubsystemPBTopLimit = NULL;
DigitalInput* RobotMap::pizzaBoxSubsystemPBBottonLimit = NULL;
DigitalInput* RobotMap::pizzaBoxSubsystemPBUpperLimit = NULL;
DigitalInput* RobotMap::pizzaBoxSubsystemPBLowerLimit = NULL;
DigitalInput* RobotMap::pizzaBoxSubsystemFrisbeeInPB = NULL;
Gyro* RobotMap::sensorSubsystemHorizontalGyro = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	chassisLeftDriveTalon = new Talon(1, 1);
	lw->AddActuator("Chassis", "LeftDriveTalon", (Talon*) chassisLeftDriveTalon);
	
	chassisRightDriveTalon = new Talon(1, 2);
	lw->AddActuator("Chassis", "RightDriveTalon", (Talon*) chassisRightDriveTalon);
	
	chassisRobotDrive21 = new RobotDrive(chassisLeftDriveTalon, chassisRightDriveTalon);
	
	chassisRobotDrive21->SetSafetyEnabled(true);
        chassisRobotDrive21->SetExpiration(0.1);
        chassisRobotDrive21->SetSensitivity(0.5);
        chassisRobotDrive21->SetMaxOutput(1.0);
        

	shooterTiltSubsystemShooterTiltEncoder = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("ShooterTiltSubsystem", "ShooterTiltEncoder", shooterTiltSubsystemShooterTiltEncoder);
	shooterTiltSubsystemShooterTiltEncoder->SetDistancePerPulse(1.0);
        shooterTiltSubsystemShooterTiltEncoder->SetPIDSourceParameter(Encoder::kRate);
        shooterTiltSubsystemShooterTiltEncoder->Start();
	shooterTiltSubsystemShooterTiltJaguar = new Victor(1, 3);
	lw->AddActuator("ShooterTiltSubsystem", "ShooterTiltJaguar", (Victor*) shooterTiltSubsystemShooterTiltJaguar);
	
	shooterTiltSubsystemShooterTiltTopLimit = new DigitalInput(1, 8);
	lw->AddSensor("ShooterTiltSubsystem", "ShooterTiltTopLimit", shooterTiltSubsystemShooterTiltTopLimit);
	
	shooterTiltSubsystemShooterTiltBottomLimit = new DigitalInput(1, 9);
	lw->AddSensor("ShooterTiltSubsystem", "ShooterTiltBottomLimit", shooterTiltSubsystemShooterTiltBottomLimit);
	
	shooterSubsystemShooterEncoder = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("ShooterSubsystem", "ShooterEncoder", shooterSubsystemShooterEncoder);
	shooterSubsystemShooterEncoder->SetDistancePerPulse(1.0);
        shooterSubsystemShooterEncoder->SetPIDSourceParameter(Encoder::kRate);
        shooterSubsystemShooterEncoder->Start();
	shooterSubsystemShooterWheelJaguar = new Victor(1, 4);
	lw->AddActuator("ShooterSubsystem", "ShooterWheelJaguar", (Victor*) shooterSubsystemShooterWheelJaguar);
	
	frisbeePanSubsystemPanTiltJaguar = new Jaguar(1, 5);
	lw->AddActuator("FrisbeePanSubsystem", "PanTiltJaguar", (Jaguar*) frisbeePanSubsystemPanTiltJaguar);
	
	frisbeePanSubsystemPanTiltEncoder = new Encoder(1, 5, 1, 6, false, Encoder::k4X);
	lw->AddSensor("FrisbeePanSubsystem", "PanTiltEncoder", frisbeePanSubsystemPanTiltEncoder);
	frisbeePanSubsystemPanTiltEncoder->SetDistancePerPulse(1.0);
        frisbeePanSubsystemPanTiltEncoder->SetPIDSourceParameter(Encoder::kRate);
        frisbeePanSubsystemPanTiltEncoder->Start();
	frisbeePanSubsystemPanInjestBeltJaguar = new Jaguar(1, 6);
	lw->AddActuator("FrisbeePanSubsystem", "PanInjestBeltJaguar", (Jaguar*) frisbeePanSubsystemPanInjestBeltJaguar);
	
	frisbeePanSubsystemPanLateralBeltJaguar = new Jaguar(1, 7);
	lw->AddActuator("FrisbeePanSubsystem", "PanLateralBeltJaguar", (Jaguar*) frisbeePanSubsystemPanLateralBeltJaguar);
	
	frisbeePanSubsystemPanBottomLimit = new DigitalInput(1, 10);
	lw->AddSensor("FrisbeePanSubsystem", "PanBottomLimit", frisbeePanSubsystemPanBottomLimit);
	
	lEDSubsystemBlueLEDStrip = new Solenoid(1, 1);
	lw->AddActuator("LEDSubsystem", "BlueLEDStrip", lEDSubsystemBlueLEDStrip);
	
	lEDSubsystemYellowLEDStrip = new Solenoid(1, 2);
	lw->AddActuator("LEDSubsystem", "YellowLEDStrip", lEDSubsystemYellowLEDStrip);
	
	lEDSubsystemGreenLEDRIng = new Solenoid(1, 3);
	lw->AddActuator("LEDSubsystem", "GreenLEDRIng", lEDSubsystemGreenLEDRIng);
	
	kickerSubsystemKickerJaguar = new Victor(1, 8);
	lw->AddActuator("KickerSubsystem", "KickerJaguar", (Victor*) kickerSubsystemKickerJaguar);
	
	kickerSubsystemKickerLimit = new DigitalInput(1, 7);
	lw->AddSensor("KickerSubsystem", "KickerLimit", kickerSubsystemKickerLimit);
	
	pizzaBoxSubsystemPizzaBoxJaguar = new Victor(1, 9);
	lw->AddActuator("PizzaBoxSubsystem", "PizzaBoxJaguar", (Victor*) pizzaBoxSubsystemPizzaBoxJaguar);
	
	pizzaBoxSubsystemPBTopLimit = new DigitalInput(1, 11);
	lw->AddSensor("PizzaBoxSubsystem", "PBTopLimit", pizzaBoxSubsystemPBTopLimit);
	
	pizzaBoxSubsystemPBBottonLimit = new DigitalInput(1, 12);
	lw->AddSensor("PizzaBoxSubsystem", "PBBottonLimit", pizzaBoxSubsystemPBBottonLimit);
	
	pizzaBoxSubsystemPBUpperLimit = new DigitalInput(1, 13);
	lw->AddSensor("PizzaBoxSubsystem", "PBUpperLimit", pizzaBoxSubsystemPBUpperLimit);
	
	pizzaBoxSubsystemPBLowerLimit = new DigitalInput(1, 14);
	lw->AddSensor("PizzaBoxSubsystem", "PBLowerLimit", pizzaBoxSubsystemPBLowerLimit);
	
	pizzaBoxSubsystemFrisbeeInPB = new DigitalInput(2, 1);
	lw->AddSensor("PizzaBoxSubsystem", "FrisbeeInPB", pizzaBoxSubsystemFrisbeeInPB);
	
	sensorSubsystemHorizontalGyro = new Gyro(1, 1);
	lw->AddSensor("SensorSubsystem", "HorizontalGyro", sensorSubsystemHorizontalGyro);
	sensorSubsystemHorizontalGyro->SetSensitivity(0.007);

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
