// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Chassis* Robot::chassis = 0;
ShooterTiltSubsystem* Robot::shooterTiltSubsystem = 0;
ShooterSubsystem* Robot::shooterSubsystem = 0;
FrisbeePanSubsystem* Robot::frisbeePanSubsystem = 0;
LEDSubsystem* Robot::lEDSubsystem = 0;
KickerSubsystem* Robot::kickerSubsystem = 0;
PizzaBoxSubsystem* Robot::pizzaBoxSubsystem = 0;
SensorSubsystem* Robot::sensorSubsystem = 0;
LcdDisplaySubsystem* Robot::lcdDisplaySubsystem = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	chassis = new Chassis();
	shooterTiltSubsystem = new ShooterTiltSubsystem();
	shooterSubsystem = new ShooterSubsystem();
	frisbeePanSubsystem = new FrisbeePanSubsystem();
	lEDSubsystem = new LEDSubsystem();
	kickerSubsystem = new KickerSubsystem();
	pizzaBoxSubsystem = new PizzaBoxSubsystem();
	sensorSubsystem = new SensorSubsystem();
	lcdDisplaySubsystem = new LcdDisplaySubsystem();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
  }
	
void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
}
void Robot::TestPeriodic() {
	lw->Run();
}
START_ROBOT_CLASS(Robot);
